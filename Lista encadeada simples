class HashLista:

    def __init__(self, tamanho):
        self.tamanho = tamanho
        self.lista = [None] * tamanho

    def inserir(self, chave, valor):
        return inserir_nahash(self, chave, valor)

    def remover(self, chave):
        posicao = self.funcao_hash(chave)
        if self.lista[posicao] is not None:
            if chave == self.lista[posicao].chave:
                # Se a chave for encontrada na primeira posição, basta sobrescrevê-la com None
                self.lista[posicao] = None
            else:
                # Se a chave não for encontrada na primeira posição, precisamos percorrer a lista
                anterior = self.lista[posicao]
                atual = anterior.prox
                while atual is not None:
                    if chave == atual.chave:
                        anterior.prox = atual.prox
                        break
                    anterior = atual
                    atual = atual.prox

    def funcao_hash(self, chave):
        return chave % self.tamanho


class HashItem:

    def __init__(self, chave, valor):
        self.chave = chave
        self.valor = valor
        self.prox = None


def inserir_nahash(tabela, chave, valor):
    # Calcula a posição do item na tabela hash
    posicao = tabela.funcao_hash(chave)

    # Cria um novo item para a tabela hash
    novo = HashItem(chave, valor)

    # Se a posição estiver vazia, insere o item diretamente
    if tabela.lista[posicao] is None:
        tabela.lista[posicao] = novo
    else:
        # Se a posição já estiver ocupada, encadeia o novo item na lista
        anterior = tabela.lista[posicao]
        atual = anterior.prox
        while atual is not None:
            anterior = atual
            atual = atual.prox
        anterior.prox = novo


def buscar_nahash(tabela, chave):
    posicao = tabela.funcao_hash(chave)
    if tabela.lista[posicao] is None:
        return None
    if chave == tabela.lista[posicao].chave:
        return tabela.lista[posicao].valor
    anterior = tabela.lista[posicao]
    atual = anterior.prox
    while atual is not None:
        if chave == atual.chave:
            return atual.valor
        anterior = atual
        atual = atual.prox
    return None


if __name__ == "__main__":
    # Cria uma tabela hash com tamanho 10
    hash_tabela = HashLista(10)

    # Insere alguns itens na tabela hash
    hash_tabela.inserir(1, "um")
    hash_tabela.inserir(2, "dois")
    hash_tabela.inserir(3, "três")
    hash_tabela.inserir(4, "quatro")

    # Imprime a tabela hash
    for item in hash_tabela.lista:
        if item is not None:
            print(item.chave, item.valor)

    # Remove um item da tabela hash
    hash_tabela.remover(2)

    # Imprime a tabela hash novamente
    for item in hash_tabela.lista:
        if item is not None:
            print(item.chave, item.valor)

    # Busca um item na tabela hash
    item = buscar_nahash(hash_tabela, 3)
    print(item)



==================================================================================================
































#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stddef.h>

typedef struct sElemento
{
  struct sElemento *next;
  int dado;
} Elemento;

typedef struct
{
  struct sElemento *head;
  struct sElemento *tail;
  int size;
} Lista;

Lista *alocaMemoria();
Elemento *alocarMemoria();
void inserirDado(int, Lista *, Elemento *);
void liberaMemoria(Lista *);
void liberarMemoria(Elemento *);
void percorrerLista(Lista *);
int remover(Lista *, Elemento *);
void verificarErro(int);
void verificarLista(Lista*, int);
void limparLista(Lista*);
int main(int argc, char const *argv[])
{
  Lista *lista = alocaMemoria();

  if (lista == NULL)
  {
    printf("Impossível alocar memória.");
    return -1;
  }

  inserirDado(15, lista, lista->tail);
  inserirDado(50, lista, lista->tail);
  inserirDado(69, lista, lista->head);
  inserirDado(20, lista, NULL);

  percorrerLista(lista);

  verificarErro(remover(lista, lista->tail));
  percorrerLista(lista);

  verificarLista(lista, 50);

  limparLista(lista);
  return 0;
}

Lista *alocaMemoria()
{
  Lista *l = (Lista *)malloc(sizeof(Lista));
  if (l == NULL)
  {
    return NULL;
  }

  l->head = NULL;
  l->tail = NULL;
  l->size = 0;
  return l;
}

Elemento *alocarMemoria()
{
  Elemento *e = (Elemento *)malloc(sizeof(Elemento));
  return e;
}

void inserirDado(int dado, Lista *l, Elemento *pivo)
{
  Elemento *e = alocarMemoria();

  e->dado = dado;
  if (pivo == NULL)
  {
    if (l->size == 0)
    {
      l->tail = e;
    }
    e->next = l->head;
    l->head = e;
  }
  else
  {
    if (pivo->next == NULL)
    {
      l->tail = e;
    }
    e->next = pivo->next;
    pivo->next = e;
  }
  l->size += 1;
}

void percorrerLista(Lista *l)
{
  Elemento *aux;
  aux = l->head;

  while (aux != NULL)
  {
    printf("%i \n", aux->dado);
    aux = aux->next;
  }
}

int remover(Lista *l, Elemento *pivo)
{
  Elemento *antigo;

  if (l->size == 0)
  {
    return -2;
  }

  if (pivo == NULL)
  {
    antigo = l->head;
    l->head = l->head->next;

    if (l->head == NULL)
    {
      l->tail == NULL;
    }
  }
  else
  {
    if (pivo->next == NULL)
    {
      return -3;
    }

    antigo = pivo->next;
    pivo->next = pivo->next->next;
  }
  if (pivo->next == NULL)
  {
    l->tail = pivo;
  }

  free(antigo);
  l->size--;
  return 0;
}

void verificarErro(int erro)
{
  if (erro == 0)
  {
  }
  else if (erro == -2)
  {
    printf("Não é possível remover de uma lista vazia.");
  }
  else if (erro == -3)
  {
    printf("O elemento pivo é o último elemento da lista.");
  }
}

void verificarLista(Lista* l, int dado){
  Elemento* e = l->head;
  int cont = 1;
  while (e!=NULL){
    if (e->dado==dado){
      printf("O elemento %i está na lista na posição %i.", dado,cont);
      break;
    }
    e=e->next;
    cont++;
  }
}

void limparLista(Lista* l){
  Elemento* e;
  Elemento* exc;

  e = l->head;

  while (e!=NULL){
    exc = e;
    e = e->next;
    free(exc);
  }
  free(l);
}
