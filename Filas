#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct sElement {
  char *chave;
// prox elemento da fila
  struct sElement *prox;
} element;

typedef struct sFila {
  element *front;//inicio da fila
  element *rear;//fim da fila
  int tamanho;
} fila;

fila *criaFila();
fila *destroiFila(fila *f);
int empty(fila *f);
int tamanhoFila(fila *f);
int pqinsert(fila *f, const char *elemento);
int pqmindelete(fila *f, char **elemento);
void imprimeFila(fila *f);

int main() {
  fila *f;
  int op;
  char buffer[100];
  char *retirar = NULL;

  if (!(f = criaFila())) {
    printf("Erro na alocação de memória!");
    return 1;
  }

  do {
    printf("\n======================== Fila ========================");
    printf("\n0 - Sair \n1 - Inserir \n2 - Remover \n3 - Quantidade de "
           "elementos na fila \n4 - Imprime a fila\n");
    printf("\nEscolha uma opção de ação: ");
    scanf("%d", &op);

    switch (op) {
    case 1:
      printf("Inserir elemento: ");
      scanf("%s", buffer);

      if (!(pqinsert(f, buffer))) {
        printf("Inserção falha!");
      }
      break;

    case 2:
      if (!(pqmindelete(f, &retirar))) {
        printf("Fila vazia.\n");
      } else {
        printf("\nElemento retirado: %s\n", retirar);
        free(retirar);
      }
      break;

    case 3:
      printf("Quantidade de elementos na fila: %d\n", tamanhoFila(f));
      break;

    case 4:
      imprimeFila(f);
      break;

    default:
      if (op != 0 || op != 1 || op != 2 || op != 3 || op != 4) {
        if (op == 0) {
          printf("Saindo....\n");
        } else {
          printf("\nNúmero fora do menu!\n");
        }
      }
    }
  } while (op != 0);

  destroiFila(f);

  return 0;
}

fila *criaFila() {
  fila *f;

  if ((f = malloc(sizeof(fila))) == NULL) {
    return NULL;
  }

  f->front = NULL;
  f->rear = NULL;
  f->tamanho = 0;
  return f;
}

fila *destroiFila(fila *f) {
  element *tmp1 = f->front;
  element *tmp2 = f->front;

  while (tmp1 != NULL) {
    tmp2 = tmp1->prox;
    free(tmp1->chave);
    free(tmp1);
    tmp1 = tmp2;
  }

  free(f);
  f = NULL;

  return NULL;
}

int empty(fila *f) {
  if ((f->front != NULL) && (f->rear != NULL)) {
    return 0;
  }

  return 1;
}

int tamanhoFila(fila *f) { return f->tamanho; }

int pqinsert(fila *f, const char *elemento) {
  element *tmp;

  if ((tmp = malloc(sizeof(element))) == NULL) {
    return 0;
  }

  tmp->chave = strdup(elemento);
  tmp->prox = NULL;

  if (empty(f)) {
    f->front = tmp;
  } else {
    f->rear->prox = tmp;
  }

  f->rear = tmp;
  f->tamanho++;

  return 1;
}

int pqmindelete(fila *f, char **elemento) {
  element *tmp = f->front;

  if (empty(f)) {
    return 0;
  }

  *elemento = strdup(f->front->chave);
  f->front = f->front->prox;

  free(tmp->chave);
  free(tmp);
  f->tamanho--;

  return 1;
}

void imprimeFila(fila *f) {
  element *tmp = f->front;

  while (tmp != NULL) {
    printf("%s\t", tmp->chave);
    tmp = tmp->prox;
  }

  printf("\n\n");
}
